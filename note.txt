Functional programming
	เป็นการเขียนฟังก์ชันจัดการข้อมูล มีการรับค่า ประมวลผล แล้ว return ออกมา
	เน้นการใช้  pure function เป็นหลัก
	พยายามหลีกเลี่ยงการเกิด side effect ในฟังก์ชัน

	function จะเป็น first class function ซึ่งไม่มีข้อจำกัดในการเรียกใช้งาน
	หมายความว่า แค่ส่งงค่าเข้าไป แล้วเอาไปใช้ที่ต่าง ๆ ได้

	ง่ายต่อการ test และ debug

OOP progrmaing
	การเขียนโปรแกรมเชิงวัตถุ โดยการคิดว่า ของที่เราจะทำนั้นมีองค์ประกอบอะไรบ้าง
	ของพวกนั้นมันทำอะไรไดบ้าง มีคุณสมบัติอะไรบ้าง และมันจะทำงานร่วมกันอย่างไร

	มี 4 เรื่องหลักคือ
		1.	abstraction เป็นการประกาศหน้าตาของ class โดยไม่ต้องกำหนด method
				เพื่อนให้ class อื่น ๆ เอาไป implement method ต่อ

		2.	encapsulation เป็นการควบคุมการเข้าถึงข้อมูลภายใน class โดยหลัก ๆ
				จะใช้ access modifier 3 ตัว public, private, protected
				public สามารถเข้าถึงได้ทุกที่
				private สามารถเข้าถึงได้เฉพาะ class ของตัวมันเอง
				protected สามารถเข้าถึงได้เฉพาะ class ของตัวมันเองและ class ที่สืบทอด

		3.	inheritance คือการสืบทอดคุณสมบัติของ class โดยการ extends และเราไม่จำเป็นต้องเขียน method ใหม่

		4.	polymorphism คือ ความสามารถในการเปลี่ยนแปลงการทำงานของ method
				โดยกำหนดโครงสร้างต้นแบบไว้ที่ class และให้ class ลูกทำการสืบทอด หรือ extend มา
				class ลูกยังสามารถ override method เพื่อเปลี่ยนแปลงการทำงานได้


Summary
	Functional
		- จะโฟกัสที่การ transform ข้อมูล
		- code reuse ยากกว่า oop
		- ง่ายต่อการแยกส่วน และ การเทส
		- จะเป็นแนว declarative คือ จะทำอะไร ต้องการอะไร แต่ไม่จำเป็นต้องบอกว่าจะทำอย่างไร
	OOP
		- โฟกัสที่ความสัมพันธ์ของข้อมูล
		- code reuse ได้ง่ายกว่า หรือสร้างโค้ดต่อจากเติมที่มีอยู่ง่ายกว่า
		- ยากต่อการแยกส่วน และ การเทส
		- จะเป็นแนว imperative คือ จะต้องทำยังไงเพื่อให้ได้สิ่งนี้


SOLID
	คือหลักการการออกแบบการเขียนโปรแกรม เพื่อให้เข้าใจง่าย และมีความยืดหยุ่นสูง

	- Single Responsibility
			class method หรือ module ต่าง ๆ ควรจะมีหน้าที่เดียว หรือมีเหตผลเดียวในการที่จะแก้ไขมัน

	- Open-closed principle
			คือกรออกของ class function หรืออื่น ๆ ให้สามารถเพิ่มความสามารถอื่น ๆ ได้ แต่ต้องไม่แก้โค้ดเดิม
			สามารถใช้หลักการ abstraction เข้ามาช่วยในการออกแบบได้



