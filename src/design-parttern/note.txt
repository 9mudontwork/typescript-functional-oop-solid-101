ref: shorturl.at/GU257

design pattern นั้นเค้าแบ่งออกได้เป็น 3 กลุ่มที่มีเป้าหมายต่างกันออกไป ประกอบด้วย

Creational patterns
	เป็นกลุ่มที่ไว้ใช้สร้าง object ในรูปแบบต่างๆ ให้มีความยืดหยุ่น(flexible) และนำโค้ดมาใช้ซ้ำ(reuse)ได้

Structural patterns
	กลุ่มนี้จะเป็นวิธีการนำ object และ class มาใช้งานร่วมกัน สร้างเป็นโครงสร้างที่มีความซับซ้อนยิ่งขึ้น โดยที่ยังมีความยืดหยุ่นและทำงานได้อย่างมีประสิทธิภาพ

Behavioral patterns
	กลุ่มสุดท้ายนี้เป็นวิธีการออกแบบการติดต่อกันระกว่าง object ให้มีความยืดหยุ่นและสามารถติดต่อกันกันได้อย่างไม่มีปัญหา

==================================================================================================


Singleton
	-	อยากให้สร้าง instance ได้เพียงแค่ครั้งเดียวเท่านั้น ป้องกันการเรียกซ้ำจากที่อื่น หรือเรียกมั่ว
	-	ไม่ต้องการให้สร้างหลาย object
	-	สามารถเข้าถึง object จากที่ไหนก็ได้ ก็ยังได้ข้อมูลเดิม

MVVM (ทำ view ต้องระวัง เพราะข้อมูล bind กันอยู่)
	Model
		- ส่วนที่เก็บข้อมูล

	View
		- ส่วนแสดงข้อมูล

	ViewModel
		-	data binding กับ view และ เก็บข้อมูลที่ view ต้องการทั้งหมด
		-	เป็นตัวกลางในการเชื่อมต่อระหว่าง model กับ view
		-	logic จะอยู่ใน นี้ทั้งหมด

MVP (เพราะกองทุกอย่างไว้ที่ presenter เลยบวมเรื่อย ๆ )
	Model
		- ส่วนที่เก็บข้อมูล มี methods จัดการข้อมูล

	View
		- ส่วนแสดงข้อมูล

	Presenter
		- ส่วนที่เป็นตัวกลางในการเชื่อมต่อระหว่าง model กับ view
			action ทุกอย่าง ใน model และ view จะต้องส่งผ่าน presenter
		-	presenter จะรับ event จาก view และสั่ง view อัปเดต
		-	presenter จะดึงข้อมูลมาจาก model อีกทีนึง
		-	view <> model ไม่รู้จักกัน

Factory Method (โรงงานผลิต object)
	-	สร้าง object ใหม่ โดยไม่ต้องรู้ว่า object นั้นมีอะไรบ้าง
	- สร้าง object ได้หลายรูปแบบ ตอนเรียกใช้ ใช้วิธีเหมือนกันได้
	- ช่วยลดการผูกติดกันของโค้ดลง แต่เวลาเพิ่ม object ต้องไปสร้าง class และ interface อีก
